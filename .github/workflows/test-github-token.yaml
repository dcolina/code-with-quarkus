name: Test GitHub Token

on:
  workflow_dispatch:  # This allows manual triggering
    inputs:
      release_version:
        description: 'Release Version (yy.mm.dd[_lts_v##]])'
        required: true

permissions:
  contents: write  # This gives write permission to repository contents

env:
  JAVA_VERSION: 21
  JAVA_DISTRO: 'temurin'  

jobs:
  test-github-token:
    runs-on: ubuntu-latest
    steps:       
      - name: Github Context
        env:
          CONTEXT: ${{ toJson(github) }}      
        run: |
          echo '::group::GitHub context'
          echo $CONTEXT
          echo '::endgroup::'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Common Vars
        id: set-common-vars
        run: |
          git config user.name "${{ secrets.GITHUB_TOKEN }}"
          git config user.email "dotCMS-Machine-User@dotcms.com"
          release_version=${{ github.event.inputs.release_version }}
          release_branch=release-${release_version}
          release_tag=v${release_version}
          release_commit=${{ github.event.inputs.release_commit }}
          if [[ -z "${release_commit}" ]]; then
            release_commit=$(git log -1 --pretty=%H)
          fi
          release_hash=${release_commit::7}
          is_lts=false
          [[ ${release_version} =~ ^[0-9]{2}.[0-9]{2}.[0-9]{2}_lts_v[0-9]{2}$ ]] && is_lts=true
          echo "release_version=${release_version}" >> $GITHUB_OUTPUT
          echo "release_branch=${release_branch}" >> $GITHUB_OUTPUT
          echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
          echo "release_commit=${release_commit}" >> $GITHUB_OUTPUT
          echo "release_hash=${release_hash}" >> $GITHUB_OUTPUT
          echo "is_lts=${is_lts}" >> $GITHUB_OUTPUT
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
  
      - name: Build Core
        run: |
          ./mvnw package -Dquarkus.package.jar.type=uber-jar -DskipTests=true
             
          rc=$?
          if [[ $rc != 0 ]]; then
            echo "Build failed with exit code $rc"
            exit $rc
          fi                

      - name: Test GitHub CLI authentication
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "Testing GitHub CLI authentication..."
          gh auth status    

      - name: Crear Tag y Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ steps.set-common-vars.outputs.release_tag }}
          git push origin ${{ steps.set-common-vars.outputs.release_tag }}

      - name: Crear Release en GitHub usando gh
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ steps.set-common-vars.outputs.release_tag }}" \
            --title "${{ steps.set-common-vars.outputs.release_version }}" 

      - name: Subir Artefacto al Release usando gh
        env:
          GITHUB_TOKEN: ${{ github.token }}  
        run: |
          zip ./artifacts/sbom-dotcms-${{ steps.set-common-vars.outputs.release_version }}.json.zip ./artifacts/sbom-dotcms-${{ steps.set-common-vars.outputs.release_version }}.json
          gh release upload "${{ steps.set-common-vars.outputs.release_tag }}" "./artifacts/sbom-dotcms-${{ steps.set-common-vars.outputs.release_version }}.json"    

      # - name: Upload SBOM as a Release Asset
      #   env:
      #     JRELEASER_GITHUB_TOKEN: ${{ github.token }}
      #     JRELEASER_PROJECT_VERSION: ${{ steps.set-common-vars.outputs.release_version }}      
      #   run: |
      #     ./mvnw -Pupload-sbom validate -DartifactsDir=./artifacts -DskipTests=true    